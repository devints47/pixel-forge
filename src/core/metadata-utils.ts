import type { PixelForgeConfig } from './config-validator';

/**
 * Comprehensive metadata utility for SEO best practices
 * Based on industry standards and search engine recommendations
 */

export interface MetadataOptions {
  title?: string;
  description?: string;
  url?: string;
  image?: string;
  type?: string;
  siteName?: string;
  locale?: string;
  author?: string;
}

export class MetadataGenerator {
  private config: PixelForgeConfig;
  private prefix: string;

  constructor(config: PixelForgeConfig) {
    this.config = config;
    this.prefix = config.output.prefix || '/';
  }

  /**
   * Essential HTML meta tags that should be included on every page
   */
  getEssentialMetaTags(options: MetadataOptions = {}): string[] {
    const {
      title = this.config.appName,
      description = this.config.description,
      author = 'Generated by Pixel Forge'
    } = options;

    return [
      '<!-- Essential HTML Meta Tags -->',
      '<meta charset="utf-8">',
      '<meta name="viewport" content="width=device-width, initial-scale=1">',
      `<meta name="description" content="${description}">`,
      `<meta name="author" content="${author}">`,
      `<meta name="generator" content="Pixel Forge">`,
      '<meta name="robots" content="index,follow">',
      '<meta name="googlebot" content="index,follow">',
      `<meta name="application-name" content="${title}">`,
      `<meta name="theme-color" content="${this.config.themeColor}">`,
    ];
  }

  /**
   * Comprehensive favicon meta tags for all platforms and browsers
   */
  getFaviconMetaTags(options: { includeSafari?: boolean } = {}): string[] {
    const { includeSafari = true } = options;
    
    const tags = [
      '<!-- Essential Favicon Meta Tags (2024 Best Practices with Multiple Sizes) -->',
      `<link rel="icon" type="image/x-icon" href="${this.prefix}favicon.ico">`,
      `<link rel="icon" type="image/png" sizes="16x16" href="${this.prefix}favicon-16x16.png">`,
      `<link rel="icon" type="image/png" sizes="32x32" href="${this.prefix}favicon-32x32.png">`,
      `<link rel="icon" type="image/png" sizes="48x48" href="${this.prefix}favicon-48x48.png">`,
      `<link rel="icon" type="image/svg+xml" href="${this.prefix}favicon.svg">`,
      
      '<!-- Apple Touch Icon (Essential Only) -->',
      `<link rel="apple-touch-icon" sizes="180x180" href="${this.prefix}apple-touch-icon.png">`,
    ];

    if (includeSafari) {
      tags.push(
        '<!-- Safari Pinned Tab -->',
        `<link rel="mask-icon" href="${this.prefix}safari-pinned-tab.svg" color="${this.config.themeColor}">`
      );
    }

    return tags;
  }

  /**
   * Comprehensive PWA and mobile meta tags
   */
  getPWAMetaTags(options: MetadataOptions = {}): string[] {
    const {
      title = this.config.appName,
      description = this.config.description
    } = options;

    return [
      '<!-- PWA Meta Tags -->',
      `<link rel="manifest" href="${this.prefix}manifest.json">`,
      `<meta name="theme-color" content="${this.config.themeColor}">`,
      `<meta name="background-color" content="${this.config.backgroundColor}">`,
      
      '<!-- Apple PWA -->',
      `<meta name="apple-mobile-web-app-capable" content="yes">`,
      `<meta name="apple-mobile-web-app-status-bar-style" content="default">`,
      `<meta name="apple-mobile-web-app-title" content="${title}">`,
      
      '<!-- Android/Chrome -->',
      `<meta name="mobile-web-app-capable" content="yes">`,
      
      '<!-- Microsoft -->',
      `<meta name="msapplication-TileColor" content="${this.config.themeColor}">`,
      `<meta name="msapplication-config" content="${this.prefix}browserconfig.xml">`,
      `<meta name="msapplication-TileImage" content="${this.prefix}mstile-144x144.png">`,
      `<meta name="msapplication-square70x70logo" content="${this.prefix}mstile-70x70.png">`,
      `<meta name="msapplication-square150x150logo" content="${this.prefix}mstile-150x150.png">`,
      `<meta name="msapplication-wide310x150logo" content="${this.prefix}mstile-310x150.png">`,
      `<meta name="msapplication-square310x310logo" content="${this.prefix}mstile-310x310.png">`,
      
      '<!-- Mobile Browser Optimization -->',
      '<meta name="format-detection" content="telephone=no">',
      '<meta name="format-detection" content="address=no">',
      '<meta name="format-detection" content="email=no">',
    ];
  }

  /**
   * Comprehensive social media meta tags (OpenGraph + Twitter + Platform-specific)
   */
  getSocialMetaTags(options: MetadataOptions = {}): string[] {
    const {
      title = this.config.appName,
      description = this.config.description,
      url = '',
      image = `${this.prefix}social-media-general.png`,
      type = 'website',
      siteName = this.config.appName,
      locale = 'en_US'
    } = options;

    return [
      '<!-- Open Graph Meta Tags -->',
      `<meta property="og:title" content="${title}">`,
      `<meta property="og:description" content="${description}">`,
      `<meta property="og:type" content="${type}">`,
      `<meta property="og:url" content="${url}">`,
      `<meta property="og:site_name" content="${siteName}">`,
      `<meta property="og:locale" content="${locale}">`,
      `<meta property="og:image" content="${image}">`,
      `<meta property="og:image:type" content="image/png">`,
      `<meta property="og:image:width" content="1200">`,
      `<meta property="og:image:height" content="630">`,
      `<meta property="og:image:alt" content="${title}">`,
      
      '<!-- Twitter Card Meta Tags -->',
      `<meta name="twitter:card" content="summary_large_image">`,
      `<meta name="twitter:title" content="${title}">`,
      `<meta name="twitter:description" content="${description}">`,
      `<meta name="twitter:image" content="${image}">`,
      `<meta name="twitter:image:alt" content="${title}">`,
      '<meta name="twitter:dnt" content="on">',
      
      '<!-- Additional Social Meta Tags -->',
      `<meta itemprop="name" content="${title}">`,
      `<meta itemprop="description" content="${description}">`,
      `<meta itemprop="image" content="${image}">`,
    ];
  }

  /**
   * Security and performance meta tags
   */
  getSecurityPerformanceMetaTags(): string[] {
    return [
      '<!-- Security Meta Tags -->',
      '<meta name="referrer" content="no-referrer-when-downgrade">',
      '<meta http-equiv="X-Content-Type-Options" content="nosniff">',
      '<meta http-equiv="X-Frame-Options" content="DENY">',
      '<meta http-equiv="X-XSS-Protection" content="1; mode=block">',
      
      '<!-- Performance Meta Tags -->',
      '<meta http-equiv="x-dns-prefetch-control" content="on">',
      `<link rel="dns-prefetch" href="//fonts.googleapis.com">`,
      `<link rel="dns-prefetch" href="//fonts.gstatic.com">`,
      `<link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>`,
      `<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>`,
    ];
  }

  /**
   * Platform verification meta tags (for webmaster tools)
   */
  getVerificationMetaTags(options: {
    google?: string;
    bing?: string;
    yandex?: string;
    pinterest?: string;
    facebook?: string;
  } = {}): string[] {
    const tags = ['<!-- Platform Verification Meta Tags -->'];
    
    if (options.google) {
      tags.push(`<meta name="google-site-verification" content="${options.google}">`);
    }
    
    if (options.bing) {
      tags.push(`<meta name="msvalidate.01" content="${options.bing}">`);
    }
    
    if (options.yandex) {
      tags.push(`<meta name="yandex-verification" content="${options.yandex}">`);
    }
    
    if (options.pinterest) {
      tags.push(`<meta name="p:domain_verify" content="${options.pinterest}">`);
    }
    
    if (options.facebook) {
      tags.push(`<meta property="fb:app_id" content="${options.facebook}">`);
    }

    return tags.length > 1 ? tags : [];
  }

  /**
   * Schema.org structured data for SEO
   */
  getStructuredDataMetaTags(options: MetadataOptions = {}): string[] {
    const {
      title = this.config.appName,
      description = this.config.description,
      url = '',
      image = `${this.prefix}social-media-general.png`,
      author = 'Generated by Pixel Forge'
    } = options;

    return [
      '<!-- Schema.org Structured Data -->',
      '<script type="application/ld+json">',
      JSON.stringify({
        "@context": "https://schema.org",
        "@type": "WebApplication",
        "name": title,
        "description": description,
        "url": url,
        "image": image,
        "author": {
          "@type": "Organization",
          "name": author
        },
        "applicationCategory": "WebApplication",
        "operatingSystem": "Web Browser"
      }, null, 2),
      '</script>'
    ];
  }

  /**
   * Get all meta tags for a specific generator type
   */
  getMetaTagsForType(type: 'favicon' | 'pwa' | 'social' | 'web' | 'all', options: MetadataOptions = {}): string[] {
    const tags: string[] = [];

    switch (type) {
      case 'favicon':
        tags.push(...this.getFaviconMetaTags());
        break;
        
      case 'pwa':
        tags.push(...this.getPWAMetaTags(options));
        break;
        
      case 'social':
        tags.push(...this.getSocialMetaTags(options));
        break;
        
      case 'web':
        tags.push(...this.getEssentialMetaTags(options));
        tags.push(...this.getSecurityPerformanceMetaTags());
        break;
        
      case 'all':
        tags.push(...this.getEssentialMetaTags(options));
        tags.push(...this.getFaviconMetaTags());
        tags.push(...this.getPWAMetaTags(options));
        tags.push(...this.getSocialMetaTags(options));
        tags.push(...this.getSecurityPerformanceMetaTags());
        break;
    }

    return tags;
  }
}
