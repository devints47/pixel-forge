name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]

jobs:
  # Matrix testing across Node.js versions
  test:
    name: Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
        convert --version

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run tests
      run: pnpm test

    - name: Build project
      run: pnpm run build

  # Linting check
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run linting
      run: pnpm run lint

  # Build check
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
        convert --version

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Build project
      run: pnpm run build

    - name: Verify CLI and tarball
      run: |
        set -euo pipefail
        # Verify built CLI runs
        node dist/cli/index.js --help || true
        # Build tarball to ensure packaging succeeds
        PKG_NAME=$(node -p "require('./package.json').name")
        PKG_VER=$(node -p "require('./package.json').version")
        TARBALL="$PKG_NAME-$PKG_VER.tgz"
        pnpm pack --pack-destination .
        echo "Tarball built: $TARBALL"
        ls -la "$TARBALL"
    

  # Security audits
  audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run security audit
      run: pnpm audit

  # High-level security audit
  audit-high:
    name: Security Audit (High)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile
  # Publish on version tags (v*)
  publish:
    name: Publish Packages
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick jq
        convert --version

    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'pnpm'

    - name: Install dependencies
      run: pnpm install --no-frozen-lockfile

    - name: Run tests
      run: pnpm test

    - name: Run lint
      run: pnpm run lint

    - name: Build project
      run: pnpm run build

    - name: Configure npm for npmjs.org
      run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish to npm
      run: npm publish --access public
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Backup package.json
      run: cp package.json package.json.backup

    - name: Rewrite package.json for GitHub Packages
      run: |
        jq '.name = "@devints47/pixel-forge" | .repository = {"type":"git","url":"git+https://github.com/devints47/pixel-forge.git"} | .publishConfig = {"registry":"https://npm.pkg.github.com"} | .bin = {"pixel-forge":"dist/cli/index.js","pforge":"dist/cli/index.js"}' package.json > package.json.tmp
        mv package.json.tmp package.json

    - name: Configure npm for GitHub Packages
      run: |
        echo "@devints47:registry=https://npm.pkg.github.com" > ~/.npmrc
        echo "//npm.pkg.github.com/:_authToken=${GITHUB_TOKEN}" >> ~/.npmrc
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to GitHub Packages
      run: npm publish --access public --registry=https://npm.pkg.github.com
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Restore package.json
      run: mv package.json.backup package.json

    - name: Run high-level security audit
      run: pnpm audit --audit-level=high
